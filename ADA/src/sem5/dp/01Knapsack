/*
 * Time Complexity: O(nW) where n is the number of items and W is the capacity of knapsack.
 * 
 * */

public class Knapsack01 {

	public static void main(String[] args) {

		int val[] = {400,100,120};
		int wt[] = {20,20,20};
		int W = 50;  
		System.out.println("MAX Profit = "+knapsack(val,wt,W,val.length));

	}

	private static int knapsack(int[] val, int[] wt,int W, int n) {
		
		int dp[][]=new int[n+1][W+1];
		
		for(int i=0;i<=n;i++) {
			
			for(int w=0;w<=W;w++) {
				
				if(i==0 || w==0) {
					dp[i][w]=0;
				}
				else if(w-wt[i-1]>=0) {
					dp[i][w] = Math.max(dp[i-1][w]  , val[i-1] + dp[i-1][w-wt[i-1]] );
				}
				else {
					dp[i][w] = dp[i-1][w];
				}
			}
		}
		
		return dp[n][W];
	}

}
